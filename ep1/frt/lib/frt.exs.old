defmodule FRT do
  @moduledoc """
  A reflexive transitive closure module.
  """

  @doc """
  Receives a binary relation R and the set A such that R ⊆ A × A,
  and returns the reflexive transitive closure of R on A.

  ## Examples

      iex> FRT.of([{:a, :b}, {:b, :c}], [:a, :b, :c])
      [a: :a, a: :b, a: :c, b: :b, b: :c, c: :c]

  """
  def of(relation, set) do
    Keyword.merge(
      Keyword.merge(relation, reflexive(set)), transitive(relation, set))
  end

  @doc """
  Receives a set A,
  and returns the reflexive closure on A.

  ## Examples

      iex> FRT.reflexive([:a, :b, :c])
      [a: :a, b: :b, c: :c]

  """
  def reflexive(set) do
    case set do
      [] -> []
      [head | tail] ->
        Keyword.merge([{head, head}], reflexive(tail))
    end
  end

  @doc """
  Receives a binary relation R and the set A such that R ⊆ A × A,
  and returns the transitive closure of R on A.

  ## Examples

      iex> FRT.transitive([{:a, :b}, {:b, :c}], [:a, :b, :c])
      [a: :b, b: :c, a: :c]

  """
  def transitive(relation, set) do
    case set do
      [] -> []
      [head | tail] ->
        transitive_for_value(relation, head) ++ transitive(relation, tail)
    end
  end

  @doc """
  Receives a binary relation R and an origin element
  | ∃ a set A : origin ∈ A and R ⊆ A × A,
  and returns the partial transitive closure of R on A from the origin.

  ## Examples

      iex> FRT.transitive_for_value([{:a, :b}, {:b, :c}], :a)
      [a: :b, a: :c]

  """
  def transitive_for_value(relation, origin) do
    transitive_for_value(relation, relation, origin, origin)
  end

  defp transitive_for_value(relation, current_relation, origin, current_element) do
    case current_relation do
      [] -> case current_element do
        ^origin -> []
        _ -> [{origin, current_element}]
      end
      [head | tail] -> case head do
        {^current_element, value} -> 
          transitive_for_value(relation, relation, origin, value) ++
          transitive_for_value(relation, tail, origin, current_element)
        _ ->
          transitive_for_value(relation, tail, origin, current_element)
      end
    end
  end
end
