defmodule Automaton do
  @moduledoc """
  Documentation for Automaton.

  An Automaton struct requires three parameters:
    - transitions: A list of length three with the current state, input symbol,
    and next state, respectively.
    - initial_state: The initial state of the automaton.
    - accept_states: A list of the automaton's acceptance states.
  """
  @enforce_keys [:transitions, :initial_state, :accept_states]
  defstruct [:transitions, :initial_state, :accept_states]

  @doc """
  Given a deterministic finite automaton and a list, returns whether that list
  belongs to the regular language generated by the automaton.

  ## Parameters
    - word: the list representing a word to be verified against the language
    - automaton: the Automaton struct for the DFA

  ## Examples

      iex> Automaton.dfa_generates_word?(%Automaton{transitions: [[:q0, :a, :q1], [:q1, :a, :q2], [:q2, :a, :q2]], initial_state: :q0, accept_states: [:q2]}, [:a])
      false
      iex> Automaton.dfa_generates_word?(%Automaton{transitions: [[:q0, :a, :q1], [:q1, :a, :q2], [:q2, :a, :q2]], initial_state: :q0, accept_states: [:q2]}, [:a, :a])
      true

  """
  def dfa_generates_word?(automaton, word) do
    Enum.member?(
      automaton.accept_states,
      Enum.reduce( # Use reduce to find the last state
        word, # Enumerable: Input word (list of symbols)
        automaton.initial_state, # Accumulator: Initial state
        fn(element, current_state) -> Enum.at(Enum.find( # Get transition for current state and current symbol
          automaton.transitions,
          fn(transition) ->
            Enum.at(transition, 0) == current_state and Enum.at(transition, 1) == element
          end), 2) end)) # Get third element of transition (next state)
  end
end
